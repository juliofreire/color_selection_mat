#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/delay.h>

// --- Protótipo das Funções Auxialiares ---
void servo0graus();
void servo90graus();
void servo180graus();

int main(){
   UBRR0 = 103;
   UCSR0A = 0;
   UCSR0B = 0b11011000;
   UCSR0C = 0b00000110;
    
   sei();
   DDRB = 0x07;
   DDRD = 0x80; //saída para o servo1

   while(1){
   }
}

ISR(USART_RX_vect){
  
  char data;
  data = USART_Receive();
  
   if(data == 65){
     PORTB = 0x02;
   }
   else if(data == 66){
     PORTB = 0x04;
   }else if(data == 67){
     //PORTB = 0x08;
     for(char i=0;i<100;i++) servo0graus();
     _delay_ms(3000);
     for(char i=0;i<100;i++) servo90graus();
   }
  
  //USART_Transmit(data);
}

void USART_Transmit(unsigned char data)
{
  while(!( UCSR0A & (1<<UDRE0)));//Espera a limpeza do registr. de transmissão
  UDR0 = data; //Coloca o dado no registrador e o envia
}

unsigned char USART_Receive(void)
{
while(!(UCSR0A & (1<<RXC0))); //Espera o dado ser recebido
return UDR0; //Lê o dado recebido e retorna
}

void servo90graus()             //Posiciona o servo em 90 graus
{
   //digitalWrite(servo1, HIGH);  //pulso do servo
   PORTD = 0x80;
   delayMicroseconds(1500);     //1.5ms
   //digitalWrite(servo1, LOW);   //completa periodo do servo
   PORTD = 0x00;
   for(int i=0;i<12;i++)delayMicroseconds(1500);
                               // 20ms = 20000us
                               // 20000us - 1500us = 18500us
                               // 18500/1500 = ~~12 
}

void servo0graus()              //Posiciona o servo em 0 graus
{
   //digitalWrite(servo1, HIGH);  //pulso do servo
   PORTD = 0x80;
   delayMicroseconds(600);      //0.6ms
   //digitalWrite(servo1, LOW);   //completa periodo do servo
   PORTD = 0x00;
   for(int i=0;i<32;i++)delayMicroseconds(600);
                               // 20ms = 20000us
                               // 20000us - 600us = 19400us
                               // 19400/600 = ~~32

}